import groovy.json.JsonOutput

pipeline {
    agent none

    environment {
        REPO_URL = 'https://github.com/johnychhantyal2/budgeting-app.git'
        DOCKERHUB_REPO = 'trhex/budget-app'
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-creds'
    }

    stages {
        stage('Prepare and Build') {
            agent { node { label 'azure' } }
            steps {
                cleanWs()
                git branch: 'main', url: "${env.REPO_URL}"
                dir('backend') {
                    script {
                        // Prune old images and remove existing tagged image if it exists
                        sh 'docker image prune -f || true'
                        sh "docker rmi ${env.DOCKERHUB_REPO}:backend || true"

                        // Fetch the commit ID of the latest commit
                        def commitId = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                        // Prepare and write updated build_info.json
                        def newBuildInfo = readFile('app/build_info.json').replace('{commit_id}', commitId)
                        writeFile file: 'app/build_info.json', text: newBuildInfo

                        // Build Docker image
                        def appImage = docker.build("${env.DOCKERHUB_REPO}:backend")
                        def buildInfo = readJSON file: 'app/build_info.json'
                        def appVersion = buildInfo.version  // Reading the version directly

                        // Tagging image with the version from build_info.json
                        appImage.tag("${env.DOCKERHUB_REPO}:${appVersion}")
                    }
                }
            }
        }

        stage('Publish Image') {
            agent { node { label 'azure' } }
            steps {
                dir('backend') {
                    script {
                        // Load and push the Docker image
                        def appImage = docker.image("${env.DOCKERHUB_REPO}:backend")
                        docker.withRegistry('https://index.docker.io/v1/', "${env.DOCKERHUB_CREDENTIALS_ID}") {
                            // Push the 'latest' tag
                            appImage.push('latest')
                            // Load version-specific info and push version tag
                            def buildInfo = readJSON file: 'app/build_info.json'
                            def appVersion = buildInfo.version
                            appImage.push("${appVersion}")
                        }
                    }
                }
            }
        }
    }
}
